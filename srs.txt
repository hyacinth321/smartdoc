@Requirement [id = rq1] [description = Return a list where each element is a word from fname.]
 Rationale  [id = ra1_open] [description = Open a file]
Rationale  [id=ra1_strip] [description = Remove characters specified at the beginning and end of a string (default to spaces or newlines) or character sequences. Only characters at the beginning or at the end, but not at the middle can be delete.]
Rationale  [id=ra1_split] [description = Slicing strings by specifying delimiters.]
Rationale  [id=ra1_append] [description = Default to all empty characters, including spaces, newlines (\n), tabs (\t), etc.]
Rationale  [id = ra1_close] [description = Close a file]
 TestCase   [id=tc_example] [description= If in the fname,is an word ¡®example¡¯, then a list of [e,x,a,m,p,l,e] will be returned]
 Priority   [High]

@Requirement [id = rq2] [description = Return a dictionary given list lst.  Each key is an element in the lst. The value is always 1.]
 Rationale  [id=ra2_dictionary] [description=For a dictionary, the d[w] means the value of the key w in the dictionary.]
 TestCase   [id=tc_odd] [description= When the list is [1,3,5,7], then the 1st,3th,5th,7th content of the dictionary will be changed to the value 1]
 Priority   [Medium]

@Requirement [id=rq3] [description = Return a dictionary where each key is a word both in the file fname and in the dictionary english_dictionary, and the corresponding value is the frequency of that word.]
 Rationale  [id=ra3_lower] [description=Convert all uppercase characters in a string to lowercase]
 TestCase   [id=tc_HelloWorld] [description = Firstly we use file2lst function to make each element in the HelloWorld a word, which is [H,e,l,l,o,W,o,r,l,d]. Then use the .lower() to make conversion of capital letters into lowercase letters, that is [h,e,l,l,o,w,o,r,l,d]. Each word will be judged whether in the english_dictionary, and the add the current number of the word as its value. So the final return of HelloWorld is {¡®h¡¯:1, ¡®e¡¯:1, ¡®l¡¯:1, ¡®l¡¯:2 ,¡¯o¡¯:1, ¡®w¡¯:1, ¡®o¡¯:2, ¡®r¡¯:1, ¡®l¡¯:3, ¡®d¡¯:1} and that is {¡®h¡¯:1, ¡¯e¡¯:1, ¡¯l¡¯:3, ¡®o¡¯:2, ¡®w¡¯:1, ¡®r¡¯:1, ¡®d¡¯:1}]
 Priority   [Medium]

@Requirement [id=rq4] [description = Return a sorted list of tuples, each tuple containing a key and a value. Note that the tuples are order in descending order of the value.]
 Rationale  [id=ra4_sort] [description=Sort lists according to the specified key.]
 TestCase   [id=tc_test] [description = When the input is {¡®t¡¯:2,¡¯e¡¯:1,¡¯s¡¯:7,¡¯t¡¯:0}, then the return result will be  ((¡®s¡¯,7),(¡¯t¡¯,2),(¡¯e¡¯,1),(¡¯t¡¯,0)).]
 Priority   [Low]

@Requirement [id=rq5] [description = We get the whole word appeared in the words.txt in lowercase, and then get the frequency of the word not only in the brexit-news.txt but also firstly exists in the dictionary words.txt. ]
 Rationale  [id=ra5_main] [description=Under if__name_='main': the code will only be executed in the case (that is, the file is executed directly as a script), and if it is import to other scripts, will not be executed.]
 TestCase   [id=tc_main] [description = When the words.txt has words [a,B,c,d,f,k,W],then the ed is{¡®a¡¯:1, ¡®b¡¯:1, ¡®c¡¯:1, ¡®d¡¯:1, ¡®f¡¯:1, ¡®k¡¯:1, ¡®w¡¯:1}. If the content of brexit-news.txt is ¡®This is only a test case.fwkaabcwk¡¯, then the output will be ((¡®a¡¯,4),(¡®c¡¯2,),(¡®w¡¯,2),(¡®k¡¯,2),(¡®f¡¯,1),(¡®b¡¯,1),(¡®d¡¯,0)) Priority   [High]